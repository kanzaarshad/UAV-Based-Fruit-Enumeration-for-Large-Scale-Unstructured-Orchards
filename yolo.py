# -*- coding: utf-8 -*-
"""yolo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xag8YDNZAHi_626ERbwFrNk7itWAgadK
"""

# Mount Google Drive to access the dataset
from google.colab import drive
drive.mount('/content/drive')

# Unzip the dataset
import zipfile
with zipfile.ZipFile("/content/drive/MyDrive/dataset.zip", 'r') as zip_ref:
    zip_ref.extractall("/content/dataset")

# Import necessary libraries
import os
import numpy as np
import cv2
from sklearn.model_selection import train_test_split
from sklearn.metrics import precision_score, recall_score, f1_score
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, Dataset
from torchvision import transforms
import matplotlib.pyplot as plt

# Define dataset class
class FruitDataset(Dataset):
    def __init__(self, images_folder, labels_file, transform=None):
        self.images_folder = images_folder
        self.labels_file = labels_file
        self.transform = transform
        self.image_files = os.listdir(images_folder)
        self.labels = np.loadtxt(labels_file)

    def __len__(self):
        return len(self.image_files)

    def __getitem__(self, idx):
        image_name = self.image_files[idx]
        image_path = os.path.join(self.images_folder, image_name)
        image = cv2.imread(image_path)
        label = self.labels[idx]

        if self.transform:
            image = self.transform(image)

        return image, label

# Define data transformations
transform = transforms.Compose([
    transforms.ToTensor(),
    # Add more transformations as needed
])

# Initialize dataset
dataset = FruitDataset(images_folder="/content/dataset/images",
                       labels_file="/content/dataset/labels.txt",
                       transform=transform)

# Split dataset into training and validation sets
train_set, val_set = train_test_split(dataset, test_size=0.2, random_state=42)

# Define dataloaders
train_loader = DataLoader(train_set, batch_size=32, shuffle=True)
val_loader = DataLoader(val_set, batch_size=32, shuffle=False)

# Define YOLO-Fruit Model architecture
class YOLOFruitModel(nn.Module):
    def __init__(self):
        super(YOLOFruitModel, self).__init__()
        # Define model layers
        # Example: self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding)
        # Add more layers as needed

    def forward(self, x):
        # Define forward pass
        return x

# Initialize model, loss function, and optimizer
model = YOLOFruitModel()
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Train the model
num_epochs = 10
for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    for images, labels in train_loader:
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
    print(f"Epoch {epoch+1}, Loss: {running_loss/len(train_loader)}")

# Evaluate the model
model.eval()
predictions = []
targets = []
with torch.no_grad():
    for images, labels in val_loader:
        outputs = model(images)
        _, predicted = torch.max(outputs, 1)
        predictions.extend(predicted.cpu().numpy())
        targets.extend(labels.cpu().numpy())

# Calculate evaluation metrics
precision = precision_score(targets, predictions, average='macro')
recall = recall_score(targets, predictions, average='macro')
f1 = f1_score(targets, predictions, average='macro')
print(f"Precision: {precision}, Recall: {recall}, F1-score: {f1}")

# Plot some example predictions
fig, axes = plt.subplots(3, 3, figsize=(10, 10))
for i, ax in enumerate(axes.flat):
    ax.imshow(val_set[i][0].permute(1, 2, 0))
    ax.set_title(f"True: {targets[i]}, Predicted: {predictions[i]}")
plt.tight_layout()
plt.show()